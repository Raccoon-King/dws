1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "dws.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "dws.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "dws.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "{{ include "dws.selectorLabels" . }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

üöÄ Document Scanner Service (DWS) has been deployed!

üìä Deployment Status:
- Chart Version: {{ .Chart.Version }}
- App Version: {{ .Chart.AppVersion }}
- Replicas: {{ .Values.replicaCount }}
- Namespace: {{ .Release.Namespace }}
- Service Account: {{ include "dws.serviceAccountName" . }}

üîç API Endpoints:
- Health Check: GET /health
- Document Scan: POST /scan
- Rules Management: POST /rules/reload, POST /rules/load
- Documentation: GET /docs

üìã Key Features:
- ‚úÖ Iron Bank compliant container images
- ‚úÖ Multi-replica deployment with autoscaling
{{- if .Values.autoscaling.enabled }}
- ‚úÖ HPA enabled ({{ .Values.autoscaling.minReplicas }}-{{ .Values.autoscaling.maxReplicas }} replicas)
{{- end }}
{{- if .Values.podDisruptionBudget.enabled }}
- ‚úÖ Pod Disruption Budget enabled
{{- end }}
{{- if .Values.networkPolicy.enabled }}
- ‚úÖ Network policies for security
{{- end }}
- ‚úÖ Security contexts and non-root execution

üîß Management Commands:
  # Check deployment status
  kubectl get deployment {{ include "dws.fullname" . }} -n {{ .Release.Namespace }}

  # View pods
  kubectl get pods -l "{{ include "dws.selectorLabels" . }}" -n {{ .Release.Namespace }}

  # Check logs
  kubectl logs -l "{{ include "dws.selectorLabels" . }}" -n {{ .Release.Namespace }} --tail=100

  # Scale manually (if HPA disabled)
  kubectl scale deployment {{ include "dws.fullname" . }} --replicas=5 -n {{ .Release.Namespace }}

  # Test the service
  helm test {{ .Release.Name }} -n {{ .Release.Namespace }}

üõ°Ô∏è Security:
- Running with non-root user (UID: 65534)
- Read-only root filesystem
- Capabilities dropped
- Security contexts enforced

{{- if .Values.monitoring.serviceMonitor.enabled }}
üìà Monitoring:
- ServiceMonitor enabled for Prometheus scraping
{{- end }}

{{- if .Values.ingress.enabled }}
üåê Ingress:
- Public endpoints configured
{{- end }}
{{- if .Values.adminIngress.enabled }}
- Admin endpoints with authentication
{{- end }}

For more information, visit: {{ .Chart.Home }}