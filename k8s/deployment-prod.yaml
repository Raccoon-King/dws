apiVersion: apps/v1
kind: Deployment
metadata:
  name: dws
  namespace: dws-prod
  labels:
    app.kubernetes.io/name: dws
    app.kubernetes.io/component: api-server
    app.kubernetes.io/part-of: document-scanner
    app.kubernetes.io/version: "1.0.0"
    environment: production
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: dws
      app.kubernetes.io/component: api-server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: dws
        app.kubernetes.io/component: api-server
        app.kubernetes.io/part-of: document-scanner
        app.kubernetes.io/version: "1.0.0"
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/health"
        # Force pod restart on config changes
        configmap.reloader.stakater.com/reload: "dws-rules,dws-llm-config"
    spec:
      serviceAccountName: dws-service-account
      automountServiceAccountToken: false

      # Security Context
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534  # nobody user
        runAsGroup: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault

      # Anti-affinity to spread pods across nodes
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values: ["dws"]
                topologyKey: kubernetes.io/hostname

      containers:
        - name: dws
          image: dws:latest
          imagePullPolicy: Always

          # Security Context
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL

          ports:
            - name: http
              containerPort: 8080
              protocol: TCP

          # Environment Variables
          env:
            - name: PORT
              value: "8080"
            - name: RULES_FILE
              value: "/etc/dws/rules/default.yaml"
            - name: LLM_CONFIG
              value: "/etc/dws/llm/llm.yaml"
            - name: LOGGING
              value: "stdout"
            - name: DEBUG
              value: "false"

            # LLM Configuration (from secrets)
            - name: LLM_ENABLED
              valueFrom:
                secretKeyRef:
                  name: dws-llm-secrets
                  key: llm-enabled
                  optional: true
            - name: LLM_API_KEY
              valueFrom:
                secretKeyRef:
                  name: dws-llm-secrets
                  key: openai-api-key
                  optional: true

            # AWS Configuration (from secrets)
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: dws-aws-secrets
                  key: access-key-id
                  optional: true
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: dws-aws-secrets
                  key: secret-access-key
                  optional: true
            - name: AWS_REGION
              valueFrom:
                secretKeyRef:
                  name: dws-aws-secrets
                  key: region
                  optional: true

          # Volume Mounts
          volumeMounts:
            - name: rules-volume
              mountPath: /etc/dws/rules
              readOnly: true
            - name: llm-config-volume
              mountPath: /etc/dws/llm
              readOnly: true
            - name: tmp-volume
              mountPath: /tmp
            - name: var-tmp-volume
              mountPath: /var/tmp

          # Resource Limits and Requests
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
              ephemeral-storage: "1Gi"
            limits:
              memory: "512Mi"
              cpu: "500m"
              ephemeral-storage: "2Gi"

          # Health Checks
          livenessProbe:
            httpGet:
              path: /health
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1

          readinessProbe:
            httpGet:
              path: /health
              port: http
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
            successThreshold: 1

          # Startup Probe for faster startup detection
          startupProbe:
            httpGet:
              path: /health
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 30
            successThreshold: 1

      # Volumes
      volumes:
        - name: rules-volume
          configMap:
            name: dws-rules
            defaultMode: 0444
        - name: llm-config-volume
          configMap:
            name: dws-llm-config
            defaultMode: 0444
        - name: tmp-volume
          emptyDir:
            sizeLimit: 1Gi
        - name: var-tmp-volume
          emptyDir:
            sizeLimit: 1Gi

      # Pod-level settings
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst

      # Node selection
      nodeSelector:
        kubernetes.io/os: linux

      # Tolerations for node taints
      tolerations:
        - key: "node.kubernetes.io/not-ready"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 300
        - key: "node.kubernetes.io/unreachable"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 300

---
# HPA for automatic scaling
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: dws-hpa
  namespace: dws-prod
  labels:
    app.kubernetes.io/name: dws
    app.kubernetes.io/component: autoscaling
    app.kubernetes.io/part-of: document-scanner
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: dws
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
        - type: Percent
          value: 100
          periodSeconds: 15
        - type: Pods
          value: 4
          periodSeconds: 15
      selectPolicy: Max

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: dws-pdb
  namespace: dws-prod
  labels:
    app.kubernetes.io/name: dws
    app.kubernetes.io/component: availability
    app.kubernetes.io/part-of: document-scanner
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: dws
      app.kubernetes.io/component: api-server
  maxUnavailable: 1