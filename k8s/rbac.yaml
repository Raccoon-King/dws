# Service Account for DWS
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dws-service-account
  namespace: dws-prod
  labels:
    app.kubernetes.io/name: dws
    app.kubernetes.io/component: service-account
    app.kubernetes.io/part-of: document-scanner
automountServiceAccountToken: false  # Security hardening

---
# ClusterRole with minimal permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: dws-reader
  labels:
    app.kubernetes.io/name: dws
    app.kubernetes.io/component: rbac
    app.kubernetes.io/part-of: document-scanner
rules:
  # Only allow reading ConfigMaps for rules
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "watch"]
    resourceNames: ["dws-rules", "dws-llm-config"]

---
# ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: dws-reader-binding
  labels:
    app.kubernetes.io/name: dws
    app.kubernetes.io/component: rbac
    app.kubernetes.io/part-of: document-scanner
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dws-reader
subjects:
  - kind: ServiceAccount
    name: dws-service-account
    namespace: dws-prod

---
# Pod Security Policy (for clusters that support it)
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: dws-psp
  labels:
    app.kubernetes.io/name: dws
    app.kubernetes.io/component: security
    app.kubernetes.io/part-of: document-scanner
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
  readOnlyRootFilesystem: true

---
# Network Policy to restrict traffic
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: dws-network-policy
  namespace: dws-prod
  labels:
    app.kubernetes.io/name: dws
    app.kubernetes.io/component: security
    app.kubernetes.io/part-of: document-scanner
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: dws
  policyTypes:
    - Ingress
    - Egress
  ingress:
    # Allow ingress from ingress controller
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 8080
    # Allow ingress from monitoring (Prometheus)
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 8080
  egress:
    # Allow DNS resolution
    - to: []
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53
    # Allow HTTPS for LLM APIs (OpenAI, etc.)
    - to: []
      ports:
        - protocol: TCP
          port: 443
    # Allow AWS API calls
    - to: []
      ports:
        - protocol: TCP
          port: 443
    # Allow internal cluster communication
    - to:
        - namespaceSelector: {}
      ports:
        - protocol: TCP
          port: 6443